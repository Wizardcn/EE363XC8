
EE363XC8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001fa  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000229  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094d  00000000  00000000  00000289  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000616  00000000  00000000  00000bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000182  00000182  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.assign_number 0000000e  00000166  00000166  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.assign_char 0000000e  00000174  00000174  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.and     00000016  000000fe  000000fe  00000172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.or      00000014  0000012a  0000012a  0000019e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.use_and_inc 00000014  0000013e  0000013e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.use_and_dec 00000014  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.shift_right 00000016  00000114  00000114  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.shift_left 0000001a  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000022  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
   8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
   c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  24:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  34:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 04       	cpc	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000182 <__bad_interrupt>:
 182:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.assign_number:

00000166 <assign_number>:
		shift_left();
	}
}

void assign_number(void){
	ga = 0x54;
 166:	84 e5       	ldi	r24, 0x54	; 84
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ga+0x1>
 16e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ga>
 172:	08 95       	ret

Disassembly of section .text.assign_char:

00000174 <assign_char>:
}

void assign_char(void){
	ub = 'K';
 174:	8b e4       	ldi	r24, 0x4B	; 75
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	08 95       	ret

Disassembly of section .text.and:

000000fe <and>:
}

void and(void){
	ga &= 0xF0;
  fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ga>
 102:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ga+0x1>
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	99 27       	eor	r25, r25
 10a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ga+0x1>
 10e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ga>
 112:	08 95       	ret

Disassembly of section .text.or:

0000012a <or>:
}

void or(void){
	ga |= 0b00001001;
 12a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ga>
 12e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ga+0x1>
 132:	89 60       	ori	r24, 0x09	; 9
 134:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ga+0x1>
 138:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ga>
 13c:	08 95       	ret

Disassembly of section .text.use_and_inc:

0000013e <use_and_inc>:
}

void use_and_inc(void){
	ga++;
 13e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ga>
 142:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ga+0x1>
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ga+0x1>
 14c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ga>
 150:	08 95       	ret

Disassembly of section .text.use_and_dec:

00000152 <use_and_dec>:
}

void use_and_dec(void){
	ub--;
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 164:	08 95       	ret

Disassembly of section .text.shift_right:

00000114 <shift_right>:
}

void shift_right(void){
	ga >>= 1;
 114:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ga>
 118:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ga+0x1>
 11c:	96 95       	lsr	r25
 11e:	87 95       	ror	r24
 120:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ga+0x1>
 124:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ga>
 128:	08 95       	ret

Disassembly of section .text.shift_left:

000000e4 <shift_left>:
}

void shift_left(void){
	ub <<= 2;
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:


int main(void)
{
	while(1){
		assign_number();
  c2:	0e 94 b3 00 	call	0x166	; 0x166 <assign_number>
		assign_char();
  c6:	0e 94 ba 00 	call	0x174	; 0x174 <assign_char>
		and();
  ca:	0e 94 7f 00 	call	0xfe	; 0xfe <and>
		or();
  ce:	0e 94 95 00 	call	0x12a	; 0x12a <or>
		use_and_inc();
  d2:	0e 94 9f 00 	call	0x13e	; 0x13e <use_and_inc>
		use_and_dec();
  d6:	0e 94 a9 00 	call	0x152	; 0x152 <use_and_dec>
		shift_right();
  da:	0e 94 8a 00 	call	0x114	; 0x114 <shift_right>
		shift_left();
  de:	0e 94 72 00 	call	0xe4	; 0xe4 <shift_left>
  e2:	ef cf       	rjmp	.-34     	; 0xc2 <main>
